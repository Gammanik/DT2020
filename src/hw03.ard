\import Utils
\import hw01 (if)
\import lect03 (Fin, M5, fileTest, fsuc, fzero, toNat, trans, vec)


-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (p : T(n < length xs)) : A
  | nil, 0, ()
  | cons a xs, 0, p => a
  | cons a xs, suc n, p => lookup xs n p

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate {A : \Type} (el : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (el, replicate el n)

\func replicate' {A : \Type} (el : A) (n : Nat) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons el (replicate' el n)

-- 3. Реализуйте аналоги функции map для vec и Vec.
\func map {A B : \Type} (f : A -> B) (n : Nat) (v : vec A n) : vec B n \elim n, v
  | 0, v => ()
  | suc n, (el', ln) => (f el', map f n ln)

\func Map {A B : \Type} (f : A -> B) (n : Nat) (v : Vec A n) : Vec B n \elim n, v
  | 0, vnil => vnil
  | suc n, vcons a v => vcons (f a) (Map f n v)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.
\func zipWith {A B C : \Type} (f : A -> B -> C) (n : Nat) (v1 : vec A n) (v2 : vec B n) : vec C n \elim n, v1, v2
  | 0, v1, v2 => ()
  | suc n, (e1, v1), (e2, v2) => (f e1 e2, zipWith f n v1 v2)

\func ZipWith {A B C : \Type} (f : A -> B -> C) (n : Nat) (v1 : Vec A n) (v2 : Vec B n) : Vec C n \elim n, v1, v2
  | 0, vnil, vnil => vnil
  | suc n, vcons a v1, vcons b v2 => vcons (f a b) (ZipWith f n v1 v2)


-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.
\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b'
  => trans (pmap (f a) q) (pmap (`f b') p)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam t => t) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.
\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => tnil
  | suc n => tcons (CTree A n) A (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.
\data Tree (A : \Type) (n : Nat) \elim n
  | suc n => {tnil' | tcons' (Tree A n) A (Tree A n) }

-- определите функцию, возвращающую высоту дерева.
\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, _ => fzero
  | suc n, tnil' => fzero
  | suc n, (tcons' t1 a t2) =>
    \let | h1 => height n t1
         | h2 => height n t2
    \in fsuc (if (toNat h1 < toNat h2) h2 h1)

-- 9. Чему равно fileTest (в нормальной форме)? Докажите это.
\func prove-tileTest : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 10. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func prove-M5 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp


-- Optional task
-- 11. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n => {?}

-- Optional task
-- 12. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => {?}

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => {?}

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => {?}

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k => {?}

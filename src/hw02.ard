\import Utils
\import hw01 (fac)
--\import lect01


-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (l : List A): List A \elim l
  | nil => nil
  | cons a xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func if {A : \Type} (x : Bool) (t e : A) : A \elim x
  | true => t
  | false => e

\func sort {A : \Type} (f : A -> A -> Bool) (lst : List A): List A \elim lst
  | nil => nil
  | cons a xs => insert f a (sort f xs)
    \where {
      \func insert {B : \Type} (f : B -> B -> Bool) (val : B) (lst' : List B): List B \elim val, lst'
        | val, nil => cons val nil
        | val, cons a l => if (f val a) (cons val (cons a l)) (cons a (cons val l))
    }

\func cmp (a : Nat) (b : Nat) : Bool
  | 0, 0 => true
  | 0, suc b => true
  | suc a, 0 => false
  | suc a, suc b => cmp a b

\func sort-test : sort cmp (cons 2 (cons 1 nil)) = (cons 1 (cons 2 nil)) => idp
\func sort-test2 : sort cmp (cons 2 (cons 3 (cons 1 nil))) = (cons 1 (cons 2 (cons 3 nil))) => idp
\func sort-test3 : sort cmp (cons 2 (cons 3 (cons 1 (cons 4 nil)))) = (cons 1 (cons 2 (cons 3 (cons 4 nil)))) => idp


-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp


-- 4. Докажите, что fac 3 равно 6.
\func fac3-test : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R => \case h \with {
  | inl a => f a
  | inr b => g b
}

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) : (\Sigma P Q -> R) =>
  \lam s => \case s \with { (p, q) => f p q }

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q R : \Type} (f : Either P Q -> \Sigma P Q) : (\Sigma (P -> Q) (Q -> P)) =>
  (\lam (pq : P) => (f (inl pq)).2,  \lam (qp : Q) => (f (inr qp)).1)


-- t6 : ( (((P -> Q) -> P) -> P) -> Q ) -> Q
\func t6 {P Q R : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => {?}
--  \lam (q : (((P -> Q) -> P) -> P) -> Q) =>
--      f (\lam (p : (P -> Q) -> P) =>
--          p (\lam (pp : P) => {?}))
--              \lam (pq : P -> Q) => p pq))
--              p pp ))
      -- (\lam (qq : Q) => (\lam (pp : P) => f pp))

--  \lam (q : Q) => f (\lam (p : (P -> Q) -> P) => (\lam (pp : P) => p pp))
--  \lam q: Q => f (\lam p: P => (\lam pp: P => (\lam fq: (P -> Q) => fq pp)))
--  \lam q => f (\lam gg => f (\lam nn => gg (\lam kk => f nn)))
--  \lam q => f (\lam gg => f (\lam nn => gg nn ))
  -- \lam q => \lam q' => \lam fp => q' q


-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x),
-- то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type)
  (h : \Pi (x : Nat) -> (P(x) -> Q(x))) (g : \Sigma (x : Nat) (P x))
--  (h : \Pi (x : Nat) -> (\Sigma (P(x) -> Q(x)) (Nat -> P x)))
  : \Sigma (x : Nat) (Q x) \elim g
  | (x', px) => (x', h x' px)


-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 {P Q : Nat -> \Type}
  (f :  \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : (P 3 -> (Q 3 -> Empty)) =>
  \case (f 3) \with {
    | inl (a : (P 3 -> Empty)) => \lam p3 => \lam q3 => a p3
    | inr (b : (Q 3 -> Empty)) => \lam p3 => \lam q3 => b q3
}

\func s4' {P Q : Nat -> \Type}
         (f :  \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : (P 3 -> (Q 3 -> Empty)) =>
  \lam p3 => \lam q3 => \case (f 3) \with {
    | inl (a : (P 3 -> Empty)) => a p3
    | inr (b : (Q 3 -> Empty)) => b q3
  }
